'''
The BalanceSheet class contains various methods to calculate different line items of the balance sheet for a given number of future years (5 years in this case). Each method calculates a specific line item based on the provided assumptions and historical data. The calculate_all_line_items method consolidates all the calculated line items into a single DataFrame representing the projected balance sheet for the future years. The inline comments explain the purpose and logic of each method and how it contributes to building the projected balance sheet.

'''


class BalanceSheet:
    def __init__(self, assumptions, historical_data):
        self.assumptions = assumptions
        self.historical_data = historical_data

    def calculate_inventory(self):
        # Calculate projected inventory for each year based on the days inventory assumption and historical COGS data.
        days_inventory = self.assumptions["Days Inventory"]
        projected_inventory = [
            (self.historical_data["Cost of Goods Sold (COGS)"].iloc[i] / 365)
            * days_inventory
            for i in range(5)
        ]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Inventory": projected_inventory,
            }
        )

    def calculate_accounts_receivable(self):
        # Calculate projected accounts receivable for each year based on the days accounts receivable assumption and historical revenue data.
        days_accounts_receivable = self.assumptions["Days Accounts Receivable"]
        projected_accounts_receivable = [
            (self.historical_data["Revenue"].iloc[i] / 365) * days_accounts_receivable
            for i in range(5)
        ]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Accounts Receivable": projected_accounts_receivable,
            }
        )

    def calculate_other_current_assets(self):
        # Calculate projected other current assets for each year based on the assumptions.
        other_current_assets = self.assumptions["Other Current Assets"]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Other Current Assets": [other_current_assets] * 5,
            }
        )

    def calculate_total_current_assets(self):
        # Calculate projected total current assets for each year by summing up inventory, accounts receivable, and other current assets.
        inventory = self.calculate_inventory()["Inventory"]
        accounts_receivable = self.calculate_accounts_receivable()[
            "Accounts Receivable"
        ]
        other_current_assets = self.calculate_other_current_assets()[
            "Other Current Assets"
        ]

        total_current_assets = inventory + accounts_receivable + other_current_assets

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Total Current Assets": total_current_assets,
            }
        )

    def calculate_net_ppe(self):
        # Calculate projected net property, plant, and equipment (PPE) for each year based on historical gross PPE and accumulated depreciation data.
        gross_ppe = self.historical_data["Gross PP&E"]
        accumulated_depreciation = self.historical_data["Accumulated Depreciation"]
        net_ppe = gross_ppe - accumulated_depreciation

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Net PP&E": net_ppe,
            }
        )

    def calculate_goodwill(self):
        # Calculate projected goodwill for each year based on the historical data (assuming it remains constant).
        goodwill = self.historical_data["Goodwill"].iloc[-1]
        projected_goodwill = [goodwill] * 5

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Goodwill": projected_goodwill,
            }
        )

    def calculate_other_assets(self):
        # Calculate projected other assets for each year based on the assumptions.
        other_assets = self.assumptions["Other Assets"]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Other Assets": [other_assets] * 5,
            }
        )

    def calculate_total_assets(self):
        # Calculate projected total assets for each year by summing up total current assets, net PPE, goodwill, and other assets.
        total_current_assets = self.calculate_total_current_assets()[
            "Total Current Assets"
        ]
        net_ppe = self.calculate_net_ppe()["Net PP&E"]
        goodwill = self.calculate_goodwill()["Goodwill"]
        other_assets = self.calculate_other_assets()["Other Assets"]

        total_assets = total_current_assets + net_ppe + goodwill + other_assets

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Total Assets": total_assets,
            }
        )

    def calculate_accounts_payable(self):
        # Calculate projected accounts payable for each year based on the days payable assumption and historical COGS data.
        days_payable = self.assumptions["Days Payable"]
        projected_accounts_payable = [
            (self.historical_data["Cost of Goods Sold (COGS)"].iloc[i] / 365)
            * days_payable
            for i in range(5)
        ]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Accounts Payable": projected_accounts_payable,
            }
        )

    def calculate_accrued_liabilities(self):
        # Calculate projected accrued liabilities for each year based on the assumption as a percentage of historical COGS.
        accrued_liabilities_as_percentage_of_cogs = self.assumptions[
            "Accrued Liabilities as % of COGS"
        ]
        projected_accrued_liabilities = [
            self.historical_data["Cost of Goods Sold (COGS)"].iloc[i]
            * accrued_liabilities_as_percentage_of_cogs
            for i in range(5)
        ]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Accrued Liabilities": projected_accrued_liabilities,
            }
        )

    def calculate_other_current_liabilities(self):
        # Calculate projected other current liabilities for each year based on the assumption as a percentage of historical COGS.
        other_current_liabilities_as_percentage_of_cogs = self.assumptions[
            "Other Current Liabilities as % of COGS"
        ]
        projected_other_current_liabilities = [
            self.historical_data["Cost of Goods Sold (COGS)"].iloc[i]
            * other_current_liabilities_as_percentage_of_cogs
            for i in range(5)
        ]

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Other Current Liabilities": projected_other_current_liabilities,
            }
        )

    def calculate_total_current_liabilities(self):
        # Calculate projected total current liabilities for each year by summing up accounts payable, accrued liabilities, and other current liabilities.
        accounts_payable = self.calculate_accounts_payable()["Accounts Payable"]
        accrued_liabilities = self.calculate_accrued_liabilities()[
            "Accrued Liabilities"
        ]
        other_current_liabilities = self.calculate_other_current_liabilities()[
            "Other Current Liabilities"
        ]

        total_current_liabilities = (
            accounts_payable + accrued_liabilities + other_current_liabilities
        )

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Total Current Liabilities": total_current_liabilities,
            }
        )

    def calculate_total_liabilities(self):
        # Calculate projected total liabilities for each year by summing up total current liabilities and other liabilities.
        total_current_liabilities = self.calculate_total_current_liabilities()[
            "Total Current Liabilities"
        ]
        other_liabilities = self.assumptions["Other Liabilities"]

        total_liabilities = total_current_liabilities + other_liabilities

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Total Liabilities": total_liabilities,
            }
        )

    def calculate_common_stock(self):
        # Calculate projected common stock for each year based on the assumption (assuming it remains constant).
        common_stock = self.assumptions["Common Stock"]
        projected_common_stock = [common_stock] * 5

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Common Stock": projected_common_stock,
            }
        )

    def calculate_total_shareholders_equity(self):
        # Calculate projected total shareholders' equity for each year by summing up common stock and retained earnings.
        common_stock = self.calculate_common_stock()["Common Stock"]
        retained_earnings = self.historical_data["Retained Earnings"]
        total_shareholders_equity = common_stock + retained_earnings

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Total Shareholders Equity": total_shareholders_equity,
            }
        )

    def calculate_total_liabilities_and_equity(self):
        # Calculate projected total liabilities and equity for each year by summing up total liabilities and total shareholders' equity.
        total_liabilities = self.calculate_total_liabilities()["Total Liabilities"]
        total_shareholders_equity = self.calculate_total_shareholders_equity()[
            "Total Shareholders Equity"
        ]
        total_liabilities_and_equity = total_liabilities + total_shareholders_equity

        return pd.DataFrame(
            {
                "Year": self.historical_data["Year"].iloc[-1]
                + [i for i in range(1, 6)],
                "Total Liabilities and Equity": total_liabilities_and_equity,
            }
        )

    def calculate_all_line_items(self):
        # Calculate all line items for each year and consolidate them into a single DataFrame.
        projected_inventory = self.calculate_inventory()
        projected_accounts_receivable = self.calculate_accounts_receivable()
        projected_other_current_assets = self.calculate_other_current_assets()
        projected_total_current_assets = self.calculate_total_current_assets()
        projected_net_ppe = self.calculate_net_ppe()
        projected_goodwill = self.calculate_goodwill()
        projected_other_assets = self.calculate_other_assets()
        projected_total_assets = self.calculate_total_assets()
        projected_accounts_payable = self.calculate_accounts_payable()
        projected_accrued_liabilities = self.calculate_accrued_liabilities()
        projected_other_current_liabilities = self.calculate_other_current_liabilities()
        projected_total_current_liabilities = self.calculate_total_current_liabilities()
        projected_total_liabilities = self.calculate_total_liabilities()
        projected_common_stock = self.calculate_common_stock()
        projected_total_shareholders_equity = self.calculate_total_shareholders_equity()
        projected_total_liabilities_and_equity = (
            self.calculate_total_liabilities_and_equity()
        )

        return pd.DataFrame(
            {
                "Year": projected_inventory["Year"],
                "Inventory": projected_inventory["Inventory"],
                "Accounts Receivable": projected_accounts_receivable[
                    "Accounts Receivable"
                ],
                "Other Current Assets": projected_other_current_assets[
                    "Other Current Assets"
                ],
                "Total Current Assets": projected_total_current_assets[
                    "Total Current Assets"
                ],
                "Net PP&E": projected_net_ppe["Net PP&E"],
                "Goodwill": projected_goodwill["Goodwill"],
                "Other Assets": projected_other_assets["Other Assets"],
                "Total Assets": projected_total_assets["Total Assets"],
                "Accounts Payable": projected_accounts_payable["Accounts Payable"],
                "Accrued Liabilities": projected_accrued_liabilities[
                    "Accrued Liabilities"
                ],
                "Other Current Liabilities": projected_other_current_liabilities[
                    "Other Current Liabilities"
                ],
                "Total Current Liabilities": projected_total_current_liabilities[
                    "Total Current Liabilities"
                ],
                "Total Liabilities": projected_total_liabilities["Total Liabilities"],
                "Common Stock": projected_common_stock["Common Stock"],
                "Total Shareholders Equity": projected_total_shareholders_equity[
                    "Total Shareholders Equity"
                ],
                "Total Liabilities and Equity": projected_total_liabilities_and_equity[
                    "Total Liabilities and Equity"
                ],
            }
        )